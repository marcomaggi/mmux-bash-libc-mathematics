\input texinfo.tex
@c %**start of header
@setfilename mmux-bash-libc-mathematics.info
@settitle MMUX Bash Libc Mathematics
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      MMUX Bash Libc Mathematics

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    MMUX Bash Libc Mathematics

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-bash-libc-mathematics

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2024

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              MMUX_BASH_LIBC_MATHEMATICS
@set PackagePkgconfigModule             mmux-bash-libc-mathematics
@set PackageLibsVar                     @env{MMUX_BASH_LIBC_MATHEMATICS_LIBS}
@set PackageCflagsVar                   @env{MMUX_BASH_LIBC_MATHEMATICS_CFLAGS}
@c This is the stem of the library in "libmmux-bash-libc-mathematics.so".
@set PackageLibstem                     mmux-bash-libc-mathematics
@set PackageApiPrefixLower              mmux_libc_math_
@set PackageApiPrefixUpper              MMUX_LIBC_MATH_

@set PackageHeader                      mmux-bash-libc-mathematics.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@set GithubUrl                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BitbucketUrl              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DownloadUrl               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DocumentationUrl          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------



@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying

This document describes version @value{VERSION} of @value{PACKAGE}, a package implementing
additional builtin commands for the @gnu{} Bash shell; to do so it installs a C language library and
a shell script which is meant to be sourced in a Bash session or script.

The library supports @posix{} platforms.  Only for testing: this package depends on the external
package @acronym{MBFL}.

This package is distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

The latest release can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-bash-libc-mathematics: (mmux-bash-libc-mathematics).  Additional GNU Bash builtins.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* format::                      Input and output formats.
* complex::                     Complex numbers utilities.
* comparison::                  Comparison builtins.
* sorting::                     Sorting builtins.
* arithmetics::                 Arithmetics builtins.
* trigonometric::               Trigonometric builtins.
* hyperbolic::                  Hyperbolic builtins.

Appendices

* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a package implementing
additional builtin commands for the @gnu{} Bash shell; to do so it installs a C language library and
a shell script which is meant to be sourced in a Bash session or script.

@value{PACKAGE} installs a shared library under @code{$libdir}; for example:

@center @file{/usr/local/lib64/libmmux-bash-libc-mathematics.so}

@noindent
it also installs a shell script, a ``shell library'', under @code{$datavar/bash}; for example:

@center @file{/usr/local/share/bash/libmmux-bash-libc-mathematics.bash}

@noindent
to use the builtins, we have to load the shell library using the builtin @code{source}.

@menu
* overview linking::            Linking code with the library.
@end menu

@include overview-linking.texi

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} mmux_bash_libc_math_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int mmux_bash_libc_math_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int mmux_bash_libc_math_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int mmux_bash_libc_math_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node format
@chapter Input and output formats


Under @gnu{} Bash: everything is a string.  Every time we call a builtin: its arguments are just
strings and we have to convert them into internal floating--point number representations.

In this documentation: every argument @var{REAL} is meant to be a string representation of a C
language type @code{double float}; every argument @var{complex} is meant to be a @strong{special}
string representation of a C language type @code{complex double}.

This pakcage's ``official'' representation of complex numbers is like this:

@example
(1.2)+i*(3.4)
@end example

@noindent
in which both the real part @samp{1.2} and the imaginary part @samp{3.4} are enclosed in
parentheses; this way any format for the real numbers can be used in the representation.


@deffn Builtin mmux-bash-libc-math-double-format @var{NEW_FORMAT}
@deffnx Builtin mmux-bash-libc-math-double-format @var{NEW_FORMAT} @var{OLD_FORMAT_VARNAME}
When called with one argument: store internally a copy of the string @var{NEW_FORMAT} to be used as
format for floating--point double numbers.

@example
add 1 2         @print{} 3.00000

mmux-bash-libc-math-double-format "%.1lf"
add 1 2         @print{} 3
@end example

When called with two arguments: in addition store the previous format, as a string, in the local
variable @var{OLD_FORMAT_VARNAME}.

@example
mmux-bash-libc-math-double-format "%.1lf" OLD_FORMAT

$OLD_FORMAT     @print{} "%lf"
@end example
@end deffn

@c page
@node complex
@chapter Complex numbers utilities


@deffn Builtin creal @var{COMPLEX}
Print a string representing the real part of the operand, a real number.

@example
creal '(1.2)+i*(3.4)'           @print{} 1.2
@end example
@end deffn


@deffn Builtin cimag @var{COMPLEX}
Print a string representing the imaginary part of the operand, a real number.

@example
cimag '(1.2)+i*(3.4)'           @print{} 3.4
@end example
@end deffn


@deffn Builtin conj @var{COMPLEX}
Print a string representing the conjugate of the operand.

@example
conjugate '(1.2)+i*(3.4)'       @print{} '(1.2)+i*(-3.4)'
@end example
@end deffn


@deffn Builtin carg @var{COMPLEX}
Print a string representing the argument of the operand, a real number.

@example
carg '(1.2)+i*(3.4)'            @print{} 1.231504
@end example
@end deffn

@c page
@node comparison
@chapter Comparison builtins


@deffn Builtin isgreater @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is greater than @varii{REAL}; otherwise return false.

@example
if isgreater 2 1
then echo F yeah
fi
@end example
@end deffn


@deffn Builtin isgreaterequal @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is greater than, or equal to, @varii{REAL}; otherwise return false.
@end deffn


@deffn Builtin isless @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is less than @varii{REAL}; otherwise return false.
@end deffn


@deffn Builtin islessequal @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is less than, or equal to, @varii{REAL}; otherwise return false.
@end deffn


@deffn Builtin islessgreater @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is less than, or greater than, @varii{REAL}; otherwise return false.
@end deffn


@deffn Builtin isunordered @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is unordered with respect to @varii{REAL}; otherwise return false.

@example
isunordered 2 1                 @result{} 1
isunordered 1 2                 @result{} 1
isunordered 1 1                 @result{} 1
isunordered 'NaN' 1             @result{} 0
isunordered 1 'NaN'             @result{} 0
isunordered 'NaN' 'NaN'         @result{} 0
@end example
@end deffn

@c page
@node sorting
@chapter Sorting builtins


@deffn Builtin min @varo{REAL} @vari{REAL} @dots{}
Print a string representing the minimum among the operands.
@end deffn


@deffn Builtin max @varo{REAL} @vari{REAL} @dots{}
Print a string representing the maximum among the operands.
@end deffn

@c page
@node arithmetics
@chapter Arithmetics builtins


@menu
* arithmetics real::            Arithmetic operations between real numbers.
* arithmetics complex::         Arithmetic operations between complex numbers.
* arithmetics rounding::        Rounding real numbers.
@end menu

@c page
@node arithmetics real
@section Arithmetic operations between real numbers


@deffn Builtin add @varo{REAL} @vari{REAL} @dots{}
Print a string which is the result of the operation:

@example
@varo{REAL} + @vari{REAL} + @dots{}
@end example

If only one operand is given: print that operand.

@example
add 1.3 2.5             @print{} 3.80000
@end example
@end deffn


@deffn Builtin sub @varo{REAL} @vari{REAL} @dots{}
Print a string which is the result of the operation:

@example
@varo{REAL} - (@vari{REAL} + @dots{})
@end example

If only one operand is given: print that operand.

@example
sub 3 1                 @print{} 2.00000
sub 10 1 3              @print{} 6.00000
@end example
@end deffn


@deffn Builtin mul @varo{REAL} @vari{REAL} @dots{}
Print a string which is the result of the operation:

@example
@varo{REAL} * @vari{REAL} * @dots{}
@end example

If only one operand is given: print that operand.

@example
mul 2 3 5               @print{} 30.00000
@end example
@end deffn


@deffn Builtin div @varo{REAL} @vari{REAL} @dots{}
Print a string which is the result of the operation:

@example
@varo{REAL} / (@vari{REAL} * @dots{})
@end example

If only one operand is given: print that operand.

@example
div 12 3                @print{} 4.00000
div 24 2 3              @print{} 4.00000
@end example
@end deffn


@deffn Builtin mod @varo{REAL_NUMERATOR} @vari{REAL_DENOMINATOR}
Print a string representing the mod of the arguments.
@end deffn


@deffn Builtin remainder @varo{REAL_NUMERATOR} @vari{REAL_DENOMINATOR}
Print a string representing the remainder of the arguments.
@end deffn


@deffn Builtin neg @var{REAL}
Print a string which is the result of the operation:

@example
- @var{REAL}
@end example

@noindent
just invert the sign of the operand.

@example
neg 12                  @print{} -12.00000
@end example
@end deffn

@c page
@node arithmetics complex
@section Arithmetic operations between complex numbers


@deffn Builtin cadd @varo{COMPLEX} @vari{COMPLEX} @dots{}
Print a string which is the result of the operation:

@example
@varo{COMPLEX} + @vari{COMPLEX} + @dots{}
@end example

If only one operand is given: print that operand.
@end deffn


@deffn Builtin csub @varo{COMPLEX} @vari{COMPLEX} @dots{}
Print a string which is the result of the operation:

@example
@varo{COMPLEX} - (@vari{COMPLEX} + @dots{})
@end example

If only one operand is given: print that operand.
@end deffn


@deffn Builtin cmul @varo{COMPLEX} @vari{COMPLEX} @dots{}
Print a string which is the result of the operation:

@example
@varo{COMPLEX} * @vari{COMPLEX} * @dots{}
@end example

If only one operand is given: print that operand.
@end deffn


@deffn Builtin cdiv @varo{COMPLEX} @vari{COMPLEX} @dots{}
Print a string which is the result of the operation:

@example
@varo{COMPLEX} / (@vari{COMPLEX} * @dots{})
@end example

If only one operand is given: print that operand.
@end deffn


@deffn Builtin cneg @var{COMPLEX}
Print a string which is the result of the operation:

@example
- @var{COMPLEX}
@end example

@noindent
just invert the sign of the operand.
@end deffn

@c page
@node arithmetics rounding
@section Rounding real numbers


@deffn Builtin ceil @var{REAL}
Print a string which is the result of applying @cfunc{ceil} to the operand.
@end deffn


@deffn Builtin floor @var{REAL}
Print a string which is the result of applying @cfunc{floor} to the operand.
@end deffn


@deffn Builtin trunc @var{REAL}
Print a string which is the result of applying @cfunc{trunc} to the operand.
@end deffn


@deffn Builtin round @var{REAL}
Print a string which is the result of applying @cfunc{round} to the operand.
@end deffn


@deffn Builtin rint @var{REAL}
Print a string which is the result of applying @cfunc{rint} to the operand.
@end deffn

@c page
@node trigonometric
@chapter Trigonometric builtins


@deffn Builtin sin @var{REAL}
@deffnx Builtin cos @var{REAL}
@deffnx Builtin tan @var{REAL}
Print a string representing the result of applying the trigonometric sine, cosine and tangent
function to @var{REAL}.

@example
sin 1.2                 @print{} 0.93204
cos 1.2                 @print{} 0.93204
@end example
@end deffn


@deffn Builtin asin @var{REAL}
@deffnx Builtin acos @var{REAL}
@deffnx Builtin atan @var{REAL}
@deffnx Builtin atan2 @vari{REAL} @varii{REAL}
Print a string representing the result of applying the trigonometric arc sine, arc cosine and arc
tangent function to @var{REAL}.

@example
atan2 0.2 0.3           @print{} 0.5880
@end example
@end deffn


@deffn Builtin csin @var{COMPLEX}
@deffnx Builtin ccos @var{COMPLEX}
@deffnx Builtin ctan @var{COMPLEX}
Print a string representing the result of applying the complex trigonometric sine, cosine and
tangent function to @var{COMPLEX}.
@end deffn


@deffn Builtin casin @var{COMPLEX}
@deffnx Builtin cacos @var{COMPLEX}
@deffnx Builtin catan @var{COMPLEX}
Print a string representing the result of applying the complex trigonometric arc sine, arc cosine
and arc tangent function to @var{COMPLEX}.
@end deffn

@c page
@node hyperbolic
@chapter Hyperbolic builtins


@deffn Builtin sinh @var{REAL}
@deffnx Builtin cosh @var{REAL}
@deffnx Builtin tanh @var{REAL}
Print a string representing the result of applying the hyperbolic sine, cosine and tangent
function to @var{REAL}.
@end deffn


@deffn Builtin asinh @var{REAL}
@deffnx Builtin acosh @var{REAL}
@deffnx Builtin atanh @var{REAL}
Print a string representing the result of applying the hyperbolic arc sine, arc cosine and arc
tangent function to @var{REAL}.
@end deffn


@deffn Builtin csinh @var{COMPLEX}
@deffnx Builtin ccosh @var{COMPLEX}
@deffnx Builtin ctanh @var{COMPLEX}
Print a string representing the result of applying the complex hyperbolic sine, cosine and
tangent function to @var{COMPLEX}.
@end deffn


@deffn Builtin casinh @var{COMPLEX}
@deffnx Builtin cacosh @var{COMPLEX}
@deffnx Builtin catanh @var{COMPLEX}
Print a string representing the result of applying the complex hyperbolic arc sine, arc cosine
and arc tangent function to @var{COMPLEX}.
@end deffn

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
the latest release of this package can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
the package @acronym{MBFL} is available online:

@center @url{http://github.com/marcomaggi/mbfl/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

