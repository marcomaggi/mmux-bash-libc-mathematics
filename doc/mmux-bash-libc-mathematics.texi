\input texinfo.tex
@c %**start of header
@setfilename mmux-bash-libc-mathematics.info
@settitle MMUX Bash Libc Mathematics
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      MMUX Bash Libc Mathematics

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    MMUX Bash Libc Mathematics

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-bash-libc-mathematics

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2024

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              MMUX_BASH_LIBC_MATHEMATICS
@set PackagePkgconfigModule             mmux-bash-libc-mathematics
@set PackageLibsVar                     @env{MMUX_BASH_LIBC_MATHEMATICS_LIBS}
@set PackageCflagsVar                   @env{MMUX_BASH_LIBC_MATHEMATICS_CFLAGS}
@c This is the stem of the library in "libmmux-bash-libc-mathematics.so".
@set PackageLibstem                     mmux-bash-libc-mathematics
@set PackageApiPrefixLower              mmux_libc_math_
@set PackageApiPrefixUpper              MMUX_LIBC_MATH_

@set PackageHeader                      mmux-bash-libc-mathematics.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@set GithubUrl                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BitbucketUrl              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DownloadUrl               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DocumentationUrl          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------



@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying

This document describes version @value{VERSION} of @value{PACKAGE}, a package implementing
additional builtin commands for the @gnu{} Bash shell; to do so it installs a C language library and
a shell script which is meant to be sourced in a Bash session or script.  The bulitins implement
interfaces to standard C Library's mathematics functions for @code{double float} and @code{complex
double float} number representations.

This package targets @posix{} platforms.  Only for testing: this package depends on the external
package @acronym{MBFL} (at least version @samp{v3.0.0-devel.8}).

This package is distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

The latest release can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-bash-libc-mathematics: (mmux-bash-libc-mathematics).  Additional GNU Bash builtins.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* format::                      Input and output formats.
* variables::                   Global variables.
* complex::                     Complex numbers utilities.
* comparison::                  Comparison builtins.
* sorting::                     Sorting builtins.
* arithmetics::                 Arithmetics builtins.
* exponentiation::              Exponentiation and logarithms.
* trigonometric::               Trigonometric builtins.
* hyperbolic::                  Hyperbolic builtins.

Appendices

* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a package implementing
additional builtin commands for the @gnu{} Bash shell; to do so it installs a C language library and
a shell script which is meant to be sourced in a Bash session or script.  The bulitins implement
interfaces to standard C Library's mathematics functions for @code{double float} and @code{complex
double float} number representations.

@value{PACKAGE} installs a shared library under @code{$libdir}; for example:

@center @file{/usr/local/lib64/libmmux-bash-libc-mathematics.so}

@noindent
it also installs a shell script, a ``shell library'', under @code{$datavar/bash}; for example:

@center @file{/usr/local/share/bash/libmmux-bash-libc-mathematics.bash}

@noindent
to use the builtins, we have to load the shell library using the builtin @code{source}.

@menu
* overview linking::            Linking code with the library.
@end menu

@include overview-linking.texi

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} mmux_bash_libc_math_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int mmux_bash_libc_math_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int mmux_bash_libc_math_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int mmux_bash_libc_math_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node format
@chapter Input and output formats


Under @gnu{} Bash: everything is a string.  Every time we call a builtin: its arguments are just
strings and we have to convert them into internal floating--point number representations.

In this documentation: every argument @var{REAL} is meant to be a string representation of a C
language type @code{double float}; every argument @var{complex} is meant to be a @strong{special}
string representation of a C language type @code{complex double}.

This package's ``official'' representation of complex numbers is like this:

@example
(1.2)+i*(3.4)
@end example

@noindent
in which both the real part @samp{1.2} and the imaginary part @samp{3.4} are enclosed in
parentheses; this way any format for the real numbers can be used in the representation.

@example
mmux-bash-libc-math-double-format "%a"
cadd '(1.2)+i*(3.4)'
@print{} (0x1.3333333333333p+0)+i*(0x1.b333333333333p+1)
@end example


@deffn Builtin mmux-bash-libc-math-double-format @var{NEW_FORMAT}
@deffnx Builtin mmux-bash-libc-math-double-format @var{NEW_FORMAT} @var{OLD_FORMAT_VARNAME}
When called with one argument: store internally a copy of the string @var{NEW_FORMAT} to be used as
format for floating--point real numbers.  If the new format specification is valid: return true and
print an error message to stderr; otherwise return false.

@example
add 1 2         @print{} 3.00000

mmux-bash-libc-math-double-format "%.0f"
add 1 2         @print{} 3
@end example

When called with two arguments: in addition store the previous format, as a string, in the local
variable @var{OLD_FORMAT_VARNAME}.

@example
mmux-bash-libc-math-double-format "%.2f" OLD_FORMAT
mmux-bash-libc-math-double-format "%.0f" OLD_FORMAT

$OLD_FORMAT     @print{} "%.2f"
@end example
@end deffn


@menu
* format examples f::           Examples with the format @samp{%f}.
* format examples e::           Examples with the format @samp{%e}.
* format examples E::           Examples with the format @samp{%E}.
* format examples g::           Examples with the format @samp{%g}.
* format examples G::           Examples with the format @samp{%G}.
* format examples a::           Examples with the format @samp{%a}.
* format examples A::           Examples with the format @samp{%A}.
@end menu

@c page
@node format examples f
@section Examples with the format @samp{%f}


Basic examples:

@example
mmux-bash-libc-math-double-format "%f"
add '1'
@print{} 1.000000

mmux-bash-libc-math-double-format "%lf"
add '1'
@print{} 1.000000
@end example

@c ------------------------------------------------------------------------

Select the precision:

@example
mmux-bash-libc-math-double-format "%.1f"
add '123456789.0987654321'
@print{} 123456789.1

mmux-bash-libc-math-double-format "%.2f"
add '123456789.0987654321'
@print{} 123456789.10

mmux-bash-libc-math-double-format "%.3f"
add '123456789.0987654321'
@print{} 123456789.099

mmux-bash-libc-math-double-format "%.4f"
add '123456789.0987654321
@print{} 123456789.0988
@end example

@c ------------------------------------------------------------------------

Select the minimum field width:

@example
mmux-bash-libc-math-double-format "%20f"
printf '@{%s@}' "$(add '123456789.0987654321')"
@print{} @{    123456789.098765@}
#   01234567890123456789
@}

mmux-bash-libc-math-double-format "%5.0f"
printf '@{%s@}' "$(add '12345')"
@print{} @{12345@}

mmux-bash-libc-math-double-format "%6.0f"
printf '@{%s@}' "$(add '12345')"
@print{} @{ 12345@}
@end example

@c ------------------------------------------------------------------------

Always include a decimal point, even if @samp{.0} requests zero digits after the decimal point:

@example
mmux-bash-libc-math-double-format "%#.0f"
printf '@{%s@}' "$(add '123456789')"
@print{} @{123456789.@}
@}
@end example

@c ------------------------------------------------------------------------

Group digits; this is a @gnu{} extension:

@example
mmux-bash-libc-math-double-format "%'.0f"
printf '@{%s@}' "$(add '123456789')"
@print{} @{123,456,789@}
@end example

@c ------------------------------------------------------------------------

Pad the field with zeros:

@example
mmux-bash-libc-math-double-format "%013.0f"
printf '@{%s@}' "$(add '123456789')"
@print{} @{0000123456789@}
@}
@end example

Ignore the padding with zero when left--justification is requested:

@example
mmux-bash-libc-math-double-format "%-013.0f"
printf '@{%s@}' "$(add '123456789')"
@print{} @{123456789    @}
@end example

@c ------------------------------------------------------------------------

Always include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "%+.0f"
printf '@{%s@}' "$(add '123456789')"
@print{} @{+123456789@}

mmux-bash-libc-math-double-format "%+.0f"
printf '@{%s@}' "$(add '-123456789')"
@print{} @{-123456789@}
@end example

@c ------------------------------------------------------------------------

Left justify, fill with spaces:

@example
mmux-bash-libc-math-double-format "%-13.0f"
printf '@{%s@}' "$(add '123456789')"
@print{} @{123456789    @}
@}
@end example

@c ------------------------------------------------------------------------

Prefix with a space if the output does not include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "% .0f"
printf '@{%s@}' "$(add '123456789')"
@print{} @{ 123456789@}

mmux-bash-libc-math-double-format "% .0f"
printf '@{%s@}' "$(add '-123456789')"
@print{} @{-123456789@}

mmux-bash-libc-math-double-format "% +.0f"
printf '@{%s@}' "$(add '123456789')"
@print{} @{+123456789@}
@end example

@c page
@node format examples e
@section Examples with the format @samp{%e}


Basic examples:

@example
mmux-bash-libc-math-double-format "%e"
add '1'
@print{} 1.000000e+00

mmux-bash-libc-math-double-format "%le"
add '1'
@print{} 1.000000e+00
@end example

@c ------------------------------------------------------------------------

Select the precision:

@example
mmux-bash-libc-math-double-format "%.1e"
add '123456789.0987654321'
@print{} '1.2e+08'

mmux-bash-libc-math-double-format "%.2e"
add '123456789.0987654321'
@print{} '1.23e+08'

mmux-bash-libc-math-double-format "%.3e"
add '123456789.0987654321'
@print{} '1.235e+08'

mmux-bash-libc-math-double-format "%.4e"
add '123456789.0987654321'
@print{} '1.2346e+08'
@end example

@c ------------------------------------------------------------------------

Select the minimum field width:

@example
mmux-bash-libc-math-double-format "%20e"
printf '@{%s@}' "$(add '123456789.0987654321')"
@print{} '@{        1.234568e+08@}'
:    01234567890123456789

mmux-bash-libc-math-double-format "%5.0e"
printf '@{%s@}' "$(add '12345')"
@print{} '@{1e+04@}'
:    01234

mmux-bash-libc-math-double-format "%6.0e"
printf '@{%s@}' "$(add '12345')"
@print{} '@{ 1e+04@}'
:    012345
@end example

@c ------------------------------------------------------------------------

Always include a decimal point, even if @samp{.0} requests zero digits after the decimal point:

@example
mmux-bash-libc-math-double-format "%#.0e"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.e+08@}'
@end example

@c ------------------------------------------------------------------------

Group digits; this is a @gnu{} extension:

@example
mmux-bash-libc-math-double-format "%'.8e"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.23456789e+08@}'
@end example

@c ------------------------------------------------------------------------

Pad the field with zeros:

@example
mmux-bash-libc-math-double-format "%013.4e"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0001.2346e+08@}'
:    0123456789012
@end example

Ignore the padding with zero when left--justification is requested:

@example
mmux-bash-libc-math-double-format "%-013.3e"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.235e+08    @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Always include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "%+.0e"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+1e+08@}'

mmux-bash-libc-math-double-format "%+.0e"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-1e+08@}'
@end example

@c ------------------------------------------------------------------------

Left justify, fill with spaces:

@example
mmux-bash-libc-math-double-format "%-13.0e"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1e+08        @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Prefix with a space if the output does not include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "% .0e"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{ 1e+08@}'

mmux-bash-libc-math-double-format "% .0e"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-1e+08@}'

mmux-bash-libc-math-double-format "% +.0e"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+1e+08@}'
@end example

@c page
@node format examples E
@section Examples with the format @samp{%E}


Basic examples:

@example
mmux-bash-libc-math-double-format "%E"
add '1'
@print{} 1.000000E+00

mmux-bash-libc-math-double-format "%lE"
add '1'
@print{} 1.000000E+00
@end example

@c ------------------------------------------------------------------------

Select the precision:

@example
mmux-bash-libc-math-double-format "%.1E"
add '123456789.0987654321'
@print{} '1.2E+08'

mmux-bash-libc-math-double-format "%.2E"
add '123456789.0987654321'
@print{} '1.23E+08'

mmux-bash-libc-math-double-format "%.3E"
add '123456789.0987654321'
@print{} '1.235E+08'

mmux-bash-libc-math-double-format "%.4E"
add '123456789.0987654321'
@print{} '1.2346E+08'
@end example

@c ------------------------------------------------------------------------

Select the minimum field width:

@example
mmux-bash-libc-math-double-format "%20E"
printf '@{%s@}' "$(add '123456789.0987654321')"
@print{} '@{        1.234568E+08@}'
:    01234567890123456789

mmux-bash-libc-math-double-format "%5.0E"
printf '@{%s@}' "$(add '12345')"
@print{} '@{1E+04@}'
:    01234

mmux-bash-libc-math-double-format "%6.0E"
printf '@{%s@}' "$(add '12345')"
@print{} '@{ 1E+04@}'
:    012345
@end example

@c ------------------------------------------------------------------------

Always include a decimal point, even if @samp{.0} requests zero digits after the decimal point:

@example
mmux-bash-libc-math-double-format "%#.0E"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.E+08@}'
@end example

@c ------------------------------------------------------------------------

Group digits; this is a @gnu{} extension:

@example
mmux-bash-libc-math-double-format "%'.8E"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.23456789E+08@}'
@end example

@c ------------------------------------------------------------------------

Pad the field with zeros:

@example
mmux-bash-libc-math-double-format "%013.4E"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0001.2346E+08@}'
:    0123456789012
@end example

Ignore the padding with zero when left--justification is requested:

@example
mmux-bash-libc-math-double-format "%-013.3E"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.235E+08    @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Always include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "%+.0E"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+1E+08@}'

mmux-bash-libc-math-double-format "%+.0E"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-1E+08@}'
@end example

@c ------------------------------------------------------------------------

Left justify, fill with spaces:

@example
mmux-bash-libc-math-double-format "%-13.0E"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1E+08        @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Prefix with a space if the output does not include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "% .0E"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{ 1E+08@}'

mmux-bash-libc-math-double-format "% .0E"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-1E+08@}'

mmux-bash-libc-math-double-format "% +.0E"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+1E+08@}'
@end example

@c page
@node format examples g
@section Examples with the format @samp{%g}


Basic examples:

@example
mmux-bash-libc-math-double-format "%g"
add '1'
@print{} 1

mmux-bash-libc-math-double-format "%lg"
add '1'
@print{} 1
@end example

@c ------------------------------------------------------------------------

Select the precision:

@example
mmux-bash-libc-math-double-format "%.1g"
add '123456789.0987654321'
@print{} '1e+08'

mmux-bash-libc-math-double-format "%.2g"
add '123456789.0987654321'
@print{} '1.2e+08'

mmux-bash-libc-math-double-format "%.3g"
add '123456789.0987654321'
@print{} '1.23e+08'

mmux-bash-libc-math-double-format "%.4g"
add '123456789.0987654321'
@print{} '1.235e+08'
@end example

@c ------------------------------------------------------------------------

Select the minimum field width:

@example
mmux-bash-libc-math-double-format "%20g"
printf '@{%s@}' "$(add '123456789.0987654321')"
@print{} '@{         1.23457e+08@}'
:    01234567890123456789

mmux-bash-libc-math-double-format "%5.0g"
printf '@{%s@}' "$(add '12345')"
@print{} '@{1e+04@}'
:    01234

mmux-bash-libc-math-double-format "%6.0g"
printf '@{%s@}' "$(add '12345')"
@print{} '@{ 1e+04@}'
:    012345
@end example

@c ------------------------------------------------------------------------

Always include a decimal point, even if @samp{.0} requests zero digits after the decimal point:

@example
mmux-bash-libc-math-double-format "%#.0g"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.e+08@}'
@end example

@c ------------------------------------------------------------------------

Group digits; this is a @gnu{} extension:

@example
mmux-bash-libc-math-double-format "%'.8g"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.2345679e+08@}'
@end example

@c ------------------------------------------------------------------------

Pad the field with zeros:

@example
mmux-bash-libc-math-double-format "%013.4g"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{00001.235e+08@}'
:    0123456789012
@end example

Ignore the padding with zero when left--justification is requested:

@example
mmux-bash-libc-math-double-format "%-013.3g"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.23e+08     @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Always include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "%+.0g"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+1e+08@}'

mmux-bash-libc-math-double-format "%+.0g"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-1e+08@}'
@end example

@c ------------------------------------------------------------------------

Left justify, fill with spaces:

@example
mmux-bash-libc-math-double-format "%-13.0g"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1e+08        @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Prefix with a space if the output does not include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "% .0g"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{ 1e+08@}'

mmux-bash-libc-math-double-format "% .0g"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-1e+08@}'

mmux-bash-libc-math-double-format "% +.0g"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+1e+08@}'
@end example

@c page
@node format examples G
@section Examples with the format @samp{%G}


Basic examples:

@example
mmux-bash-libc-math-double-format "%G"
add '1'
@print{} 1

mmux-bash-libc-math-double-format "%lG"
add '1'
@print{} 1
@end example

@c ------------------------------------------------------------------------

Select the precision:

@example
mmux-bash-libc-math-double-format "%.1G"
add '123456789.0987654321'
@print{} '1E+08'

mmux-bash-libc-math-double-format "%.2G"
add '123456789.0987654321'
@print{} '1.2E+08'

mmux-bash-libc-math-double-format "%.3G"
add '123456789.0987654321'
@print{} '1.23E+08'

mmux-bash-libc-math-double-format "%.4G"
add '123456789.0987654321'
@print{} '1.235E+08'
@end example

@c ------------------------------------------------------------------------

Select the minimum field width:

@example
mmux-bash-libc-math-double-format "%20G"
printf '@{%s@}' "$(add '123456789.0987654321')"
@print{} '@{         1.23457E+08@}'
:    01234567890123456789

mmux-bash-libc-math-double-format "%5.0G"
printf '@{%s@}' "$(add '12345')"
@print{} '@{1E+04@}'
:    01234

mmux-bash-libc-math-double-format "%6.0G"
printf '@{%s@}' "$(add '12345')"
@print{} '@{ 1E+04@}'
:    012345
@end example

@c ------------------------------------------------------------------------

Always include a decimal point, even if @samp{.0} requests zero digits after the decimal point:

@example
mmux-bash-libc-math-double-format "%#.0G"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.E+08@}'
@end example

@c ------------------------------------------------------------------------

Group digits; this is a @gnu{} extension:

@example
mmux-bash-libc-math-double-format "%'.8G"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.2345679E+08@}'
@end example

@c ------------------------------------------------------------------------

Pad the field with zeros:

@example
mmux-bash-libc-math-double-format "%013.4G"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{00001.235E+08@}'
:    0123456789012
@end example

Ignore the padding with zero when left--justification is requested:

@example
mmux-bash-libc-math-double-format "%-013.3G"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1.23E+08     @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Always include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "%+.0G"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+1E+08@}'

mmux-bash-libc-math-double-format "%+.0G"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-1E+08@}'
@end example

@c ------------------------------------------------------------------------

Left justify, fill with spaces:

@example
mmux-bash-libc-math-double-format "%-13.0G"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{1E+08        @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Prefix with a space if the output does not include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "% .0G"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{ 1E+08@}'

mmux-bash-libc-math-double-format "% .0G"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-1E+08@}'

mmux-bash-libc-math-double-format "% +.0G"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+1E+08@}'
@end example

@c page
@node format examples a
@section Examples with the format @samp{%a}


Basic examples:

@example
mmux-bash-libc-math-double-format "%a"
add '1'
@print{} '0x1p+0'

mmux-bash-libc-math-double-format "%la"
add '1'
@print{} '0x1p+0'

mmux-bash-libc-math-double-format "%a"
cadd '(1.2)+i*(3.4)'
@print{} '(0x1.3333333333333p+0)+i*(0x1.b333333333333p+1)'
@end example

@c ------------------------------------------------------------------------

Select the precision:

@example
mmux-bash-libc-math-double-format "%.1a"
add '123456789.0987654321'
@print{} '0x1.dp+26'

mmux-bash-libc-math-double-format "%.2a"
add '123456789.0987654321'
@print{} '0x1.d7p+26'

mmux-bash-libc-math-double-format "%.3a"
add '123456789.0987654321'
@print{} '0x1.d6fp+26'

mmux-bash-libc-math-double-format "%.4a"
add '123456789.0987654321'
@print{} '0x1.d6f3p+26'
@end example

@c ------------------------------------------------------------------------

Select the minimum field width:

@example
mmux-bash-libc-math-double-format "%30a"
printf '@{%s@}' "$(add '123456789.0987654321')"
@print{} '@{         0x1.d6f34546522c4p+26@}'
:    012345678901234567890123456789

mmux-bash-libc-math-double-format "%4.0a"
printf '@{%s@}' "$(add '12345')"
@print{} '@{0x2p+13@}'
:    01234

mmux-bash-libc-math-double-format "%10.0a"
printf '@{%s@}' "$(add '12345')"
@print{} '@{   0x2p+13@}'
:    0123456789
@end example

@c ------------------------------------------------------------------------

Always include a decimal point, even if @samp{.0} requests zero digits after the decimal point:

@example
mmux-bash-libc-math-double-format "%#.0a"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0x2.p+26@}'
@end example

@c ------------------------------------------------------------------------

Group digits; this is a @gnu{} extension; ignored for this format:

@example
mmux-bash-libc-math-double-format "%'.8a"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0x1.d6f34540p+26@}'
@end example

@c ------------------------------------------------------------------------

Pad the field with zeros:

@example
mmux-bash-libc-math-double-format "%020.4a"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0x000000001.d6f3p+26@}'
:    01234567890123456789
@end example

Ignore the padding with zero when left--justification is requested:

@example
mmux-bash-libc-math-double-format "%-020.3a"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0x1.d6fp+26         @}'
:    01234567890123456789
@end example

@c ------------------------------------------------------------------------

Always include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "%+.0a"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+0x2p+26@}'

mmux-bash-libc-math-double-format "%+.0a"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-0x2p+26@}'
@end example

@c ------------------------------------------------------------------------

Left justify, fill with spaces:

@example
mmux-bash-libc-math-double-format "%-13.0a"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0x2p+26      @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Prefix with a space if the output does not include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "% .0a"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{ 0x2p+26@}'

mmux-bash-libc-math-double-format "% .0a"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-0x2p+26@}'

mmux-bash-libc-math-double-format "% +.0a"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+0x2p+26@}'
@end example

@c page
@node format examples A
@section Examples with the format @samp{%A}


Basic examples:

@example
mmux-bash-libc-math-double-format "%A"
add '1'
@print{} '0X1P+0'

mmux-bash-libc-math-double-format "%lA"
add '1'
@print{} '0X1P+0'

mmux-bash-libc-math-double-format "%A"
cadd '(1.2)+i*(3.4)'
@print{} '(0X1.3333333333333P+0)+i*(0X1.B333333333333P+1)'
@end example

@c ------------------------------------------------------------------------

Select the precision:

@example
mmux-bash-libc-math-double-format "%.1A"
add '123456789.0987654321'
@print{} '0X1.DP+26'

mmux-bash-libc-math-double-format "%.2A"
add '123456789.0987654321'
@print{} '0X1.D7P+26'

mmux-bash-libc-math-double-format "%.3A"
add '123456789.0987654321'
@print{} '0X1.D6FP+26'

mmux-bash-libc-math-double-format "%.4A"
add '123456789.0987654321'
@print{} '0X1.D6F3P+26'
@end example

@c ------------------------------------------------------------------------

Select the minimum field width:

@example
mmux-bash-libc-math-double-format "%30A"
printf '@{%s@}' "$(add '123456789.0987654321')"
@print{} '@{         0X1.D6F34546522C4P+26@}'
:    012345678901234567890123456789

mmux-bash-libc-math-double-format "%4.0A"
printf '@{%s@}' "$(add '12345')"
@print{} '@{0X2P+13@}'
:    01234

mmux-bash-libc-math-double-format "%10.0A"
printf '@{%s@}' "$(add '12345')"
@print{} '@{   0X2P+13@}'
:    0123456789
@end example

@c ------------------------------------------------------------------------

Always include a decimal point, even if @samp{.0} requests zero digits after the decimal point:

@example
mmux-bash-libc-math-double-format "%#.0A"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0X2.P+26@}'
@end example

@c ------------------------------------------------------------------------

Group digits; this is a @gnu{} extension; ignored for this format:

@example
mmux-bash-libc-math-double-format "%'.8A"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0X1.D6F34540P+26@}'
@end example

@c ------------------------------------------------------------------------

Pad the field with zeros:

@example
mmux-bash-libc-math-double-format "%020.4A"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0X000000001.D6F3P+26@}'
:    01234567890123456789
@end example

Ignore the padding with zero when left--justification is requested:

@example
mmux-bash-libc-math-double-format "%-020.3A"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0X1.D6FP+26         @}'
:    01234567890123456789
@end example

@c ------------------------------------------------------------------------

Always include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "%+.0A"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+0X2P+26@}'

mmux-bash-libc-math-double-format "%+.0A"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-0X2P+26@}'
@end example

@c ------------------------------------------------------------------------

Left justify, fill with spaces:

@example
mmux-bash-libc-math-double-format "%-13.0A"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{0X2P+26      @}'
:    0123456789012
@end example

@c ------------------------------------------------------------------------

Prefix with a space if the output does not include a plus/minus sign:

@example
mmux-bash-libc-math-double-format "% .0A"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{ 0X2P+26@}'

mmux-bash-libc-math-double-format "% .0A"
printf '@{%s@}' "$(add '-123456789')"
@print{} '@{-0X2P+26@}'

mmux-bash-libc-math-double-format "% +.0A"
printf '@{%s@}' "$(add '123456789')"
@print{} '@{+0X2P+26@}'
@end example

@c page
@node variables
@chapter Global variables


@macro MmuxLibcMathDefvar{NAME}
@defvr {Global Variable} \NAME\
The value of the C language constant @samp{\NAME\}.
@end defvr

@end macro

@MmuxLibcMathDefvar{M_E}
@MmuxLibcMathDefvar{M_LOG2E}
@MmuxLibcMathDefvar{M_LOG10E}
@MmuxLibcMathDefvar{M_LN2}
@MmuxLibcMathDefvar{M_LN10}
@MmuxLibcMathDefvar{M_PI}
@MmuxLibcMathDefvar{M_PI_2}
@MmuxLibcMathDefvar{M_PI_4}
@MmuxLibcMathDefvar{M_1_PI}
@MmuxLibcMathDefvar{M_2_PI}
@MmuxLibcMathDefvar{M_2_SQRTPI}
@MmuxLibcMathDefvar{M_SQRT2}
@MmuxLibcMathDefvar{M_SQRT1_2}
@MmuxLibcMathDefvar{FP_NAN}
@MmuxLibcMathDefvar{FP_INFINITE}
@MmuxLibcMathDefvar{FP_ZERO}
@MmuxLibcMathDefvar{FP_SUBNORMAL}
@MmuxLibcMathDefvar{FP_NORMAL}

@c page
@node complex
@chapter Complex numbers utilities


@deffn Builtin rectangular @var{REAL_RE} @var{REAL_IM}
Compose a complex number from its real and imaginary parts, print the result on stdout.

@example
rectangular 1.2 3.4             @print{} (1.2)+i*(3.4)
@end example
@end deffn


@deffn Builtin polar @var{REAL_MAGNITUDE} @var{REAL_ANGLE}
Compose a complex number from its magnitude and angle parts, print the result on stdout.

@example
declare MAG=$(cabs '(1.2)+i*(3.4)')
declare ANG=$(carg '(1.2)+i*(3.4)')

polar "$MAG" "$ANG"             @print{} (1.200000001)+i*(3.399999999)
@end example
@end deffn


@deffn Builtin creal @var{COMPLEX}
Print a string representing the real part of the operand, a real number.

@example
creal '(1.2)+i*(3.4)'           @print{} 1.2
@end example
@end deffn


@deffn Builtin cimag @var{COMPLEX}
Print a string representing the imaginary part of the operand, a real number.

@example
cimag '(1.2)+i*(3.4)'           @print{} 3.4
@end example
@end deffn


@deffn Builtin conj @var{COMPLEX}
Print a string representing the conjugate of the operand.

@example
conjugate '(1.2)+i*(3.4)'       @print{} '(1.2)+i*(-3.4)'
@end example
@end deffn


@deffn Builtin carg @var{COMPLEX}
Print a string representing the argument of the operand, a real number.

@example
carg '(1.2)+i*(3.4)'            @print{} 1.231504
@end example
@end deffn

@c page
@node comparison
@chapter Comparison builtins


@deffn Builtin isgreater @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is greater than @varii{REAL}; otherwise return false.

@example
if isgreater 2 1
then echo F yeah
fi
@end example
@end deffn


@deffn Builtin isgreaterequal @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is greater than, or equal to, @varii{REAL}; otherwise return false.
@end deffn


@deffn Builtin isless @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is less than @varii{REAL}; otherwise return false.
@end deffn


@deffn Builtin islessequal @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is less than, or equal to, @varii{REAL}; otherwise return false.
@end deffn


@deffn Builtin islessgreater @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is less than, or greater than, @varii{REAL}; otherwise return false.
@end deffn


@deffn Builtin isunordered @vari{REAL} @varii{REAL}
Return true if @vari{REAL} is unordered with respect to @varii{REAL}; otherwise return false.

@example
isunordered 2 1                 @result{} 1
isunordered 1 2                 @result{} 1
isunordered 1 1                 @result{} 1
isunordered 'NaN' 1             @result{} 0
isunordered 1 'NaN'             @result{} 0
isunordered 'NaN' 'NaN'         @result{} 0
@end example
@end deffn

@c page
@node sorting
@chapter Sorting builtins


@deffn Builtin min @varo{REAL} @vari{REAL} @dots{}
Print a string representing the minimum among the operands.
@end deffn


@deffn Builtin max @varo{REAL} @vari{REAL} @dots{}
Print a string representing the maximum among the operands.
@end deffn

@c page
@node arithmetics
@chapter Arithmetics builtins


@menu
* arithmetics real::            Arithmetic operations between real numbers.
* arithmetics complex::         Arithmetic operations between complex numbers.
* arithmetics rounding::        Rounding real numbers.
@end menu

@c page
@node arithmetics real
@section Arithmetic operations between real numbers


@deffn Builtin add @varo{REAL} @vari{REAL} @dots{}
Print a string which is the result of the operation:

@example
@varo{REAL} + @vari{REAL} + @dots{}
@end example

If only one operand is given: print that operand.

@example
add 1.3 2.5             @print{} 3.80000
@end example
@end deffn


@deffn Builtin sub @varo{REAL} @vari{REAL} @dots{}
Print a string which is the result of the operation:

@example
@varo{REAL} - (@vari{REAL} + @dots{})
@end example

If only one operand is given: print that operand.

@example
sub 3 1                 @print{} 2.00000
sub 10 1 3              @print{} 6.00000
@end example
@end deffn


@deffn Builtin mul @varo{REAL} @vari{REAL} @dots{}
Print a string which is the result of the operation:

@example
@varo{REAL} * @vari{REAL} * @dots{}
@end example

If only one operand is given: print that operand.

@example
mul 2 3 5               @print{} 30.00000
@end example
@end deffn


@deffn Builtin div @varo{REAL} @vari{REAL} @dots{}
Print a string which is the result of the operation:

@example
@varo{REAL} / (@vari{REAL} * @dots{})
@end example

If only one operand is given: print that operand.

@example
div 12 3                @print{} 4.00000
div 24 2 3              @print{} 4.00000
@end example
@end deffn


@deffn Builtin mod @varo{REAL_NUMERATOR} @vari{REAL_DENOMINATOR}
Print a string representing the mod of the arguments.
@end deffn


@deffn Builtin remainder @varo{REAL_NUMERATOR} @vari{REAL_DENOMINATOR}
Print a string representing the remainder of the arguments.
@end deffn


@deffn Builtin neg @var{REAL}
Print a string which is the result of the operation:

@example
- @var{REAL}
@end example

@noindent
just invert the sign of the operand.

@example
neg 12                  @print{} -12.00000
@end example
@end deffn

@c page
@node arithmetics complex
@section Arithmetic operations between complex numbers


@deffn Builtin cadd @varo{COMPLEX} @vari{COMPLEX} @dots{}
Print a string which is the result of the operation:

@example
@varo{COMPLEX} + @vari{COMPLEX} + @dots{}
@end example

If only one operand is given: print that operand.
@end deffn


@deffn Builtin csub @varo{COMPLEX} @vari{COMPLEX} @dots{}
Print a string which is the result of the operation:

@example
@varo{COMPLEX} - (@vari{COMPLEX} + @dots{})
@end example

If only one operand is given: print that operand.
@end deffn


@deffn Builtin cmul @varo{COMPLEX} @vari{COMPLEX} @dots{}
Print a string which is the result of the operation:

@example
@varo{COMPLEX} * @vari{COMPLEX} * @dots{}
@end example

If only one operand is given: print that operand.
@end deffn


@deffn Builtin cdiv @varo{COMPLEX} @vari{COMPLEX} @dots{}
Print a string which is the result of the operation:

@example
@varo{COMPLEX} / (@vari{COMPLEX} * @dots{})
@end example

If only one operand is given: print that operand.
@end deffn


@deffn Builtin cneg @var{COMPLEX}
Print a string which is the result of the operation:

@example
- @var{COMPLEX}
@end example

@noindent
just invert the sign of the operand.
@end deffn

@c page
@node arithmetics rounding
@section Rounding real numbers


@deffn Builtin ceil @var{REAL}
Print a string which is the result of applying @cfunc{ceil} to the operand.
@end deffn


@deffn Builtin floor @var{REAL}
Print a string which is the result of applying @cfunc{floor} to the operand.
@end deffn


@deffn Builtin trunc @var{REAL}
Print a string which is the result of applying @cfunc{trunc} to the operand.
@end deffn


@deffn Builtin round @var{REAL}
Print a string which is the result of applying @cfunc{round} to the operand.
@end deffn


@deffn Builtin rint @var{REAL}
Print a string which is the result of applying @cfunc{rint} to the operand.
@end deffn

@c page
@node exponentiation
@chapter Exponentiation and logarithms


@deffn Builtin exp @var{REAL}
@deffnx Builtin cexp @var{COMPLEX}
Compute @math{e} raised to the power of a number, print the result on stdout.
@end deffn


@deffn Builtin exp2 @var{REAL}
Compute @math{2} raised to the power of a real number, print the result on stdout.
@end deffn


@deffn Builtin exp10 @var{REAL}
Compute @math{10} raised to the power of a real number, print the result on stdout.
@end deffn


@deffn Builtin expm1 @var{REAL}
Compute @math{exp(@var{REAL}) - 1}, print the result on stdout.
@end deffn

@c ------------------------------------------------------------------------

@deffn Builtin log @var{REAL}
@deffnx Builtin clog @var{COMPLEX}
Compute the base @math{e} logarithm of a number, print the result on stdout.
@end deffn


@deffn Builtin log2 @var{REAL}
Compute the base @math{2} logarithm of a real number, print the result on stdout.
@end deffn


@deffn Builtin log10 @var{REAL}
@deffnx Builtin clog10 @var{REAL}
Compute the base @math{10} logarithm of a number, print the result on stdout.
@end deffn


@deffn Builtin logb @var{REAL}
Extract the exponent of a real number, print the result on stdout.

@example
logb 12.3               @print{} 3
@end example
@end deffn


@deffn Builtin log1p @var{REAL}
Compute @math{log(1 + @var{REAL})}, print the result on stdout.
@end deffn

@c ------------------------------------------------------------------------

@deffn Builtin pow @var{REAL_BASE} @var{REAL_EXPONENT}
@deffnx Builtin cpow @var{COMPLEX_BASE} @var{COMPLEX_EXPONENT}
Compute @var{BASE} raised to the power of @var{EXPONENT}, print the result on stdout.
@end deffn


@deffn Builtin sqrt @var{REAL}
@deffnx Builtin csqrt @var{REAL}
Compute square root of a number, print the result on stdout.

@example
sqrt 64                 @print{} 8
@end example
@end deffn


@deffn Builtin cbrt @var{REAL}
Compute cube root of a real number, print the result on stdout.

@example
cbrt 8                  @print{} 3
@end example
@end deffn


@deffn Builtin hypot @var{REAL_X} @var{REAL_Y}
Compute @math{sqrt(X^2 + Y^2)}, print the result on stdout.

@example
hypot 2 3               @print{} 3.6056
@end example
@end deffn
@c page
@node trigonometric
@chapter Trigonometric builtins


@deffn Builtin sin @var{REAL}
@deffnx Builtin cos @var{REAL}
@deffnx Builtin tan @var{REAL}
Print a string representing the result of applying the trigonometric sine, cosine and tangent
function to @var{REAL}.

@example
sin 1.2                 @print{} 0.93204
cos 1.2                 @print{} 0.93204
@end example
@end deffn


@deffn Builtin asin @var{REAL}
@deffnx Builtin acos @var{REAL}
@deffnx Builtin atan @var{REAL}
@deffnx Builtin atan2 @vari{REAL} @varii{REAL}
Print a string representing the result of applying the trigonometric arc sine, arc cosine and arc
tangent function to @var{REAL}.

@example
atan2 0.2 0.3           @print{} 0.5880
@end example
@end deffn


@deffn Builtin csin @var{COMPLEX}
@deffnx Builtin ccos @var{COMPLEX}
@deffnx Builtin ctan @var{COMPLEX}
Print a string representing the result of applying the complex trigonometric sine, cosine and
tangent function to @var{COMPLEX}.
@end deffn


@deffn Builtin casin @var{COMPLEX}
@deffnx Builtin cacos @var{COMPLEX}
@deffnx Builtin catan @var{COMPLEX}
Print a string representing the result of applying the complex trigonometric arc sine, arc cosine
and arc tangent function to @var{COMPLEX}.
@end deffn

@c page
@node hyperbolic
@chapter Hyperbolic builtins


@deffn Builtin sinh @var{REAL}
@deffnx Builtin cosh @var{REAL}
@deffnx Builtin tanh @var{REAL}
Print a string representing the result of applying the hyperbolic sine, cosine and tangent
function to @var{REAL}.
@end deffn


@deffn Builtin asinh @var{REAL}
@deffnx Builtin acosh @var{REAL}
@deffnx Builtin atanh @var{REAL}
Print a string representing the result of applying the hyperbolic arc sine, arc cosine and arc
tangent function to @var{REAL}.
@end deffn


@deffn Builtin csinh @var{COMPLEX}
@deffnx Builtin ccosh @var{COMPLEX}
@deffnx Builtin ctanh @var{COMPLEX}
Print a string representing the result of applying the complex hyperbolic sine, cosine and
tangent function to @var{COMPLEX}.
@end deffn


@deffn Builtin casinh @var{COMPLEX}
@deffnx Builtin cacosh @var{COMPLEX}
@deffnx Builtin catanh @var{COMPLEX}
Print a string representing the result of applying the complex hyperbolic arc sine, arc cosine
and arc tangent function to @var{COMPLEX}.
@end deffn

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
the latest release of this package can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
the package @acronym{MBFL} is available online:

@center @url{http://github.com/marcomaggi/mbfl/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

